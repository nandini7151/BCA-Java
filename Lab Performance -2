Task-1:

Imagine you are developing a Java application for a car rental agency. In this system, you have a class called Vehicle representing general properties and behaviors of vehicles.
Additionally, you have a subclass called Car, which extends the Vehicle class and adds specific features related to cars, such as the number of doors and the type of fuel.
While implementing methods in the Car class, you find yourself needing to differentiate between local variables, instance variables, and superclass variables.
1.	Explain the role and usage of the super keyword in Java. Provide examples illustrating how super can be used to access superclass members and invoke superclass constructors within a subclass like Car.
2.	Describe the significance of the this keyword in Java and how it differs from super. 
Give examples demonstrating the use of this to refer to instance variables and methods within the same class, and discuss scenarios where using this is necessary for disambiguation or clarification.

Task-2: 
a.	Recall the basic principles of exception handling in Java, give example of try-catch blocks and the handling of checked exception. 
b.  Write a program to demonstrate Interface and implements multiple interface in a java.



Answer:-
public class Vehicle {
    // Instance variables
    private String manufacturer;
    private int year;
    
    // Constructor
    public Vehicle(String manufacturer, int year) {
        this.manufacturer = manufacturer;
        this.year = year;
    }
    
    // Getter methods
    public String getManufacturer() {
        return manufacturer;
    }
    
    public int getYear() {
        return year;
    }
}

public class Car extends Vehicle {
    // Instance variable specific to Car class
    private int numDoors;
    private String fuelType;
    
    // Constructor
    public Car(String manufacturer, int year, int numDoors, String fuelType) {
        super(manufacturer, year); // Call superclass constructor
        this.numDoors = numDoors;
        this.fuelType = fuelType;
    }
    
    // Getter methods specific to Car class
    public int getNumDoors() {
        return numDoors;
    }
    
    public String getFuelType() {
        return fuelType;
    }
    
    // Method using local variable, instance variable, and superclass variable
    public void displayCarDetails() {
        // Local variable
        String message = "This car is manufactured by " + super.getManufacturer() + " in " + super.getYear();
        
        // Instance variable
        message += ", has " + numDoors + " doors";
        
        // Superclass variable accessed through superclass methods
        message += ", and runs on " + super.getFuelType();
        
        System.out.println(message);
    }
}



1) The 'Super' keyword is used to refer to superclass parent objects.
:- It is used to call superclass methods, and to access the superclass constructor.
:- It is mainly used to remove the confusion between superclasses and subclasses that have methods with the same name.
